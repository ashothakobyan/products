{"ast":null,"code":"var _jsxFileName = \"/home/work/Desktop/AshotHakobyan/checkout-react/src/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport styles from \"./Checkout.module.css\";\nimport { LoadingIcon } from \"./Icons\";\nimport { getProducts } from \"./dataService\";\nimport Product from \"./components/product/Product\";\nimport { ProductsContext } from \"./slicer/Context\"; // You are provided with an incomplete <Checkout /> component.\n// You are not allowed to add any additional HTML elements.\n// You are not allowed to use refs.\n// Once the <Checkout /> component is mounted, load the products using the getProducts function.\n// Once all the data is successfully loaded, hide the loading icon.\n// Render each product object as a <Product/> component, passing in the necessary props.\n// Implement the following functionality:\n//  - The add and remove buttons should adjust the ordered quantity of each product\n//  - The add and remove buttons should be enabled/disabled to ensure that the ordered quantity can’t be negative and can’t exceed the available count for that product.\n//  - The total shown for each product should be calculated based on the ordered quantity and the price\n//  - The total in the order summary should be calculated\n//  - For orders over $1000, apply a 10% discount to the order. Display the discount text only if a discount has been applied.\n//  - The total should reflect any discount that has been applied\n//  - All dollar amounts should be displayed to 2 decimal places\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkout = () => {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const {\n    showLoadingState\n  } = useContext(ProductsContext);\n  console.log(showLoadingState); // useEffect(() => {\n  //   getProducts().then((res) => {\n  //     // setShowLoadingState(false);\n  //     setProducts(res);\n  //   });\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"lUJgohAKrejXoCDKoUncUdqnDAs=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/home/work/Desktop/AshotHakobyan/checkout-react/src/Checkout.js"],"names":["React","useState","useContext","styles","LoadingIcon","getProducts","Product","ProductsContext","Checkout","products","setProducts","showLoadingState","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,OAAP,MAAoB,8BAApB;AAEA,SAASC,eAAT,QAAgC,kBAAhC,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM;AAACU,IAAAA;AAAD,MAAqBT,UAAU,CAACK,eAAD,CAArC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,gBAAZ,EAJqB,CAKrB;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD,CAtDD;;GAAMH,Q;;KAAAA,Q;AAwDN,eAAeA,QAAf","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport styles from \"./Checkout.module.css\";\nimport { LoadingIcon } from \"./Icons\";\nimport { getProducts } from \"./dataService\";\nimport Product from \"./components/product/Product\";\n\nimport { ProductsContext } from \"./slicer/Context\";\n\n// You are provided with an incomplete <Checkout /> component.\n// You are not allowed to add any additional HTML elements.\n// You are not allowed to use refs.\n\n// Once the <Checkout /> component is mounted, load the products using the getProducts function.\n// Once all the data is successfully loaded, hide the loading icon.\n// Render each product object as a <Product/> component, passing in the necessary props.\n// Implement the following functionality:\n//  - The add and remove buttons should adjust the ordered quantity of each product\n//  - The add and remove buttons should be enabled/disabled to ensure that the ordered quantity can’t be negative and can’t exceed the available count for that product.\n//  - The total shown for each product should be calculated based on the ordered quantity and the price\n//  - The total in the order summary should be calculated\n//  - For orders over $1000, apply a 10% discount to the order. Display the discount text only if a discount has been applied.\n//  - The total should reflect any discount that has been applied\n//  - All dollar amounts should be displayed to 2 decimal places\n\nconst Checkout = () => {\n  const [products, setProducts] = useState([]);\n\n  const {showLoadingState} = useContext(ProductsContext);\n  console.log(showLoadingState);\n  // useEffect(() => {\n  //   getProducts().then((res) => {\n  //     // setShowLoadingState(false);\n  //     setProducts(res);\n  //   });\n  // }, []);\n\n  return (\n    <div>\n      {/* <header className={styles.header}>\n        <h1>Electro World</h1>\n      </header>\n      <main>\n        {showLoadingState ? <LoadingIcon /> : null}\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>Product ID</th>\n              <th>Product Name</th>\n              <th># Available</th>\n              <th>Price</th>\n              <th>Quantity</th>\n              <th>Total</th>\n              <th></th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {products.length\n              ? products.map((product) => (\n                  <Product\n                    key={product.id}\n                    id={product.id}\n                    name={product.nam}\n                    availableCount={product.availableCount}\n                    price={product.price}\n                    orderedQuantity={product.orderedQuantity}\n                    total={product.total}\n                  />\n                ))\n              : null}\n          </tbody>\n        </table>\n        <h2>Order summary</h2>\n        <p>Discount: $ </p>\n        <p>Total: $ </p>\n      </main> */}\n    </div>\n  );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}