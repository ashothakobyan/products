{"ast":null,"code":"import { act } from \"@testing-library/react\";\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE_LOADING_STATE\":\n      return { ...state,\n        showLoadingState: !state.showLoadingState\n      };\n\n    case \"SET_PRODUCTS\":\n      return { ...state,\n        products: action.products\n      };\n\n    case \"ADD_ORDER\":\n      const addedProduct = state.products.find(product => product.id === action.id);\n      const newAddedProduct = { ...addedProduct\n      };\n      newAddedProduct.availableCount = newAddedProduct.availableCount - 1;\n      const newProducts = [...state.products];\n      newProducts.splice(action.index, 1, newAddedProduct);\n      const orderProductIndex = state.orderedProducts.findIndex(product => product.id === action.id);\n      console.log(orderProductIndex);\n      const newOrderedProducts = [...state.orderedProducts];\n\n      if (orderProductIndex !== -1) {\n        const cloneOrderedProduct = { ...newOrderedProducts[orderProductIndex]\n        };\n        console.log(4444444, newOrderedProducts[orderProductIndex].quantity);\n        cloneOrderedProduct.quantity = newOrderedProducts[orderProductIndex].quantity + 1;\n        newOrderedProducts[orderProductIndex] = cloneOrderedProduct;\n      } else {\n        const orderedProduct = {\n          id: action.id,\n          quantity: 1,\n          name: newAddedProduct.name,\n          price: newAddedProduct.price\n        };\n        newOrderedProducts.push(orderedProduct);\n      }\n\n      return { ...state,\n        products: newProducts,\n        orderedProducts: newOrderedProducts\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/hakob/Desktop/products/src/slicer/Store.js"],"names":["act","reducer","state","action","type","showLoadingState","products","addedProduct","find","product","id","newAddedProduct","availableCount","newProducts","splice","index","orderProductIndex","orderedProducts","findIndex","console","log","newOrderedProducts","cloneOrderedProduct","quantity","orderedProduct","name","price","push"],"mappings":"AAAA,SAASA,GAAT,QAAoB,wBAApB;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,sBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,gBAAgB,EAAE,CAACH,KAAK,CAACG;AAFpB,OAAP;;AAIF,SAAK,cAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELI,QAAAA,QAAQ,EAAEH,MAAM,CAACG;AAFZ,OAAP;;AAIF,SAAK,WAAL;AACE,YAAMC,YAAY,GAAGL,KAAK,CAACI,QAAN,CAAeE,IAAf,CAClBC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACO,EADhB,CAArB;AAIA,YAAMC,eAAe,GAAG,EAAE,GAAGJ;AAAL,OAAxB;AACAI,MAAAA,eAAe,CAACC,cAAhB,GAAiCD,eAAe,CAACC,cAAhB,GAAiC,CAAlE;AACA,YAAMC,WAAW,GAAG,CAAC,GAAGX,KAAK,CAACI,QAAV,CAApB;AAEAO,MAAAA,WAAW,CAACC,MAAZ,CAAmBX,MAAM,CAACY,KAA1B,EAAiC,CAAjC,EAAoCJ,eAApC;AAEA,YAAMK,iBAAiB,GAAGd,KAAK,CAACe,eAAN,CAAsBC,SAAtB,CACvBT,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACO,EADX,CAA1B;AAGAS,MAAAA,OAAO,CAACC,GAAR,CAAYJ,iBAAZ;AACA,YAAMK,kBAAkB,GAAG,CAAC,GAAGnB,KAAK,CAACe,eAAV,CAA3B;;AACA,UAAID,iBAAiB,KAAK,CAAC,CAA3B,EAA8B;AAC5B,cAAMM,mBAAmB,GAAG,EAC1B,GAAGD,kBAAkB,CAACL,iBAAD;AADK,SAA5B;AAGAG,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBC,kBAAkB,CAACL,iBAAD,CAAlB,CAAsCO,QAA3D;AACAD,QAAAA,mBAAmB,CAACC,QAApB,GACEF,kBAAkB,CAACL,iBAAD,CAAlB,CAAsCO,QAAtC,GAAiD,CADnD;AAEAF,QAAAA,kBAAkB,CAACL,iBAAD,CAAlB,GAAwCM,mBAAxC;AACD,OARD,MAQO;AACL,cAAME,cAAc,GAAG;AACrBd,UAAAA,EAAE,EAAEP,MAAM,CAACO,EADU;AAErBa,UAAAA,QAAQ,EAAE,CAFW;AAGrBE,UAAAA,IAAI,EAAEd,eAAe,CAACc,IAHD;AAIrBC,UAAAA,KAAK,EAAEf,eAAe,CAACe;AAJF,SAAvB;AAMAL,QAAAA,kBAAkB,CAACM,IAAnB,CAAwBH,cAAxB;AACD;;AAED,aAAO,EACL,GAAGtB,KADE;AAELI,QAAAA,QAAQ,EAAEO,WAFL;AAGLI,QAAAA,eAAe,EAAEI;AAHZ,OAAP;;AAKF;AACE,aAAOnB,KAAP;AAnDJ;AAqDD,CAtDM","sourcesContent":["import { act } from \"@testing-library/react\";\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_LOADING_STATE\":\r\n      return {\r\n        ...state,\r\n        showLoadingState: !state.showLoadingState,\r\n      };\r\n    case \"SET_PRODUCTS\":\r\n      return {\r\n        ...state,\r\n        products: action.products,\r\n      };\r\n    case \"ADD_ORDER\":\r\n      const addedProduct = state.products.find(\r\n        (product) => product.id === action.id\r\n      );\r\n\r\n      const newAddedProduct = { ...addedProduct };\r\n      newAddedProduct.availableCount = newAddedProduct.availableCount - 1;\r\n      const newProducts = [...state.products];\r\n\r\n      newProducts.splice(action.index, 1, newAddedProduct);\r\n\r\n      const orderProductIndex = state.orderedProducts.findIndex(\r\n        (product) => product.id === action.id\r\n      );\r\n      console.log(orderProductIndex);\r\n      const newOrderedProducts = [...state.orderedProducts];\r\n      if (orderProductIndex !== -1) {\r\n        const cloneOrderedProduct = {\r\n          ...newOrderedProducts[orderProductIndex],\r\n        };\r\n        console.log(4444444, newOrderedProducts[orderProductIndex].quantity);\r\n        cloneOrderedProduct.quantity =\r\n          newOrderedProducts[orderProductIndex].quantity + 1;\r\n        newOrderedProducts[orderProductIndex] = cloneOrderedProduct;\r\n      } else {\r\n        const orderedProduct = {\r\n          id: action.id,\r\n          quantity: 1,\r\n          name: newAddedProduct.name,\r\n          price: newAddedProduct.price,\r\n        };\r\n        newOrderedProducts.push(orderedProduct);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        products: newProducts,\r\n        orderedProducts: newOrderedProducts,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}